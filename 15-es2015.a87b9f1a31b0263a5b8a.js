(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{I68A:function(n,e,t){"use strict";t.r(e),t.d(e,"SampleFourthModule",function(){return b});var c=t("An66"),l=t("1VvW"),a=t("5Q2+"),o=t("kZht"),m=t("aJOL"),i=t("WGpx");function p(n,e){1&n&&o.Vc(0,"Small")}function s(n,e){1&n&&(o.Vc(0),o.xc(1,"currency")),2&n&&o.Wc(o.yc(1,1,e.$implicit))}function r(n,e){1&n&&o.Vc(0,"Medium")}function u(n,e){1&n&&(o.Vc(0),o.xc(1,"currency")),2&n&&o.Wc(o.yc(1,1,e.$implicit))}function d(n,e){1&n&&o.Vc(0,"Large")}function g(n,e){1&n&&(o.Vc(0),o.xc(1,"currency")),2&n&&o.Wc(o.yc(1,1,e.$implicit))}function V(n,e){1&n&&o.Vc(0,"Date")}function y(n,e){1&n&&(o.Vc(0),o.xc(1,"date")),2&n&&o.Xc("\n                    ",o.zc(1,1,e.$implicit,"dd.MM.yyyy HH:mm"),"\n                ")}let h=(()=>{class n{constructor(){this.data=[],this.elements=[]}ngOnInit(){this.data=[{toppings:["tomato sauce","mozzarella cheese"],prices:{small:"5.00",medium:"6.00",large:"7.00"}},{toppings:["tomato sauce","mozzarella cheese","ham"],prices:{small:"6.50",medium:"7.50",large:"8.50"}}],this.elements=[{position:null,name:"Hydrogen",date:{value:NaN},symbol:"H",status:!0},{position:2,name:"",date:{value:new Date},symbol:void 0,status:!1},{position:3,name:"Lithium",date:{value:1/0},symbol:"Li",status:!0},{position:4,name:"Beryllium",date:{value:0},symbol:"    ",status:!1}]}ngAfterViewInit(){document.querySelectorAll("pre code").forEach(n=>{hljs.highlightBlock(n)})}}return n.\u0275fac=function(e){return new(e||n)},n.\u0275cmp=o.Xb({type:n,selectors:[["sample-fourth"]],decls:101,vars:3,consts:[[1,"simple-toolbar"],[1,"column-samples"],[1,"column"],[1,"javascript"],["auto-width","",3,"source"],["key","toppings","width","350"],["key","prices.small"],["ngx-th",""],["ngx-td",""],["key","prices.medium"],["key","prices.large"],["key","date.value","important-template","",3,"stub"]],template:function(n,e){1&n&&(o.kc(0,"mat-toolbar",0),o.Vc(1,"\n    "),o.kc(2,"span"),o.Vc(3,"Example nested models"),o.jc(),o.Vc(4,"\n"),o.jc(),o.Vc(5,"\n\n"),o.kc(6,"div",1),o.Vc(7,"\n    "),o.kc(8,"div",2),o.Vc(9,"\n        "),o.kc(10,"pre"),o.kc(11,"code",3),o.Vc(12,"\n  // app.component.ts\n  import { Component } from \"@angular/core\";\n  import { Pizza } from \"./pizza.interface\";\n\n  @Component({\n    selector: 'app',\n    templateUrl: './app.component.html'\n  })\n  export class AppComponent {\n\n    public pizzas: Pizza[] = [\n        {\n            toppings: ['tomato sauce', 'mozzarella cheese'],\n            prices: {\n              small: '5.00',\n              medium: '6.00',\n              large: '7.00'\n            }\n        },\n        {\n            toppings: ['tomato sauce', 'mozzarella cheese', 'ham'],\n            prices: {\n              small: '6.50',\n              medium: '7.50',\n              large: '8.50'\n            }\n        }\n    ];\n\n  }\n\n"),o.jc(),o.jc(),o.Vc(13,"\n    "),o.jc(),o.Vc(14,"\n    "),o.kc(15,"div",2),o.Vc(16,"\n        "),o.kc(17,"pre"),o.kc(18,"code",3),o.ec(),o.Vc(19,'\n  \x3c!-- app.component.html --\x3e\n\n  <ngx-table-builder [source]="data" auto-width>\n    <ngx-column key="toppings" width="350"></ngx-column>\n\n    <ngx-column key="prices.small">\n      <ng-template ngx-th>Small</ng-template>\n      <ng-template ngx-td let-cell>{{ cell | currency }}</ng-template>\n    </ngx-column>\n\n     <ngx-column key="prices.small">\n      <ng-template ngx-th>Small</ng-template>\n      <ng-template ngx-td let-cell>{{ cell | currency }}</ng-template>\n    </ngx-column>\n\n    <ngx-column key="prices.small">\n      <ng-template ngx-th>Small</ng-template>\n      <ng-template ngx-td let-cell>{{ cell | currency }}</ng-template>\n    </ngx-column>\n  </ngx-table-builder>\n\n'),o.lc(),o.jc(),o.jc(),o.Vc(20,"\n\n        "),o.kc(21,"ngx-table-builder",4),o.Vc(22,"\n            "),o.fc(23,"ngx-column",5),o.Vc(24,"\n\n            "),o.kc(25,"ngx-column",6),o.Vc(26,"\n                "),o.Tc(27,p,1,0,"ng-template",7),o.Vc(28,"\n                "),o.Tc(29,s,2,3,"ng-template",8),o.Vc(30,"\n            "),o.jc(),o.Vc(31,"\n\n            "),o.kc(32,"ngx-column",9),o.Vc(33,"\n                "),o.Tc(34,r,1,0,"ng-template",7),o.Vc(35,"\n                "),o.Tc(36,u,2,3,"ng-template",8),o.Vc(37,"\n            "),o.jc(),o.Vc(38,"\n\n            "),o.kc(39,"ngx-column",10),o.Vc(40,"\n                "),o.Tc(41,d,1,0,"ng-template",7),o.Vc(42,"\n                "),o.Tc(43,g,2,3,"ng-template",8),o.Vc(44,"\n            "),o.jc(),o.Vc(45,"\n        "),o.jc(),o.Vc(46,"\n    "),o.jc(),o.Vc(47,"\n"),o.jc(),o.Vc(48,"\n\n"),o.fc(49,"br"),o.Vc(50,"\n\n"),o.kc(51,"div",1),o.Vc(52,"\n    "),o.kc(53,"div",2),o.Vc(54,"\n        "),o.kc(55,"ngx-table-builder",4),o.Vc(56,"\n            "),o.kc(57,"ngx-column",11),o.Vc(58,"\n                "),o.Tc(59,V,1,0,"ng-template",7),o.Vc(60,"\n                "),o.Tc(61,y,2,4,"ng-template",8),o.Vc(62,"\n            "),o.jc(),o.Vc(63,"\n        "),o.jc(),o.Vc(64,"\n        "),o.fc(65,"br"),o.Vc(66,"\n\n        "),o.kc(67,"pre"),o.kc(68,"code",3),o.ec(),o.Vc(69,'\n   \x3c!-- app.component.html --\x3e\n\n   <ngx-table-builder [source]="data" auto-width>\n     \x3c!-- important-template - keyword to override table column styles --\x3e\n     <ngx-column key="date.value" important-template [stub]="null">\n        <ng-template ngx-th>Date</ng-template>\n        <ng-template ngx-td let-date>\n          {{ date | date: \'dd.MM.yyyy HH:mm\' }}\n        </ng-template>\n     </ngx-column>\n   </ngx-table-builder>\n\n        '),o.lc(),o.jc(),o.jc(),o.Vc(70,"\n\n        By default we use '--' for stub invalid value. In some cases, you need not to use a stub. For example, if you\n        leave a stub, an error may occur: "),o.fc(71,"br"),o.fc(72,"br"),o.Vc(73,"\n        "),o.kc(74,"pre"),o.Vc(75," InvalidPipeArgument: 'Unable to convert \"-\" into a date' for pipe 'DatePipe'."),o.jc(),o.Vc(76,"\n    "),o.jc(),o.Vc(77,"\n    "),o.kc(78,"div",2),o.Vc(79,"\n        "),o.kc(80,"pre"),o.kc(81,"code",3),o.ec(),o.Vc(82,"\n  // app.component.ts\n  import { Component } from \"@angular/core\";\n  import { Elements } from \"./elements.interface\";\n\n  @Component({\n    selector: 'app',\n    templateUrl: './app.component.html'\n  })\n  export class AppComponent {\n    public data: Elements[] = [\n     { position: null, name: 'Hydrogen', date: { value: NaN }, symbol: 'H', status: true },\n     { position: 2, name: '', date: { value: new Date() }, symbol: undefined, status: false },\n     { position: 3, name: 'Lithium', date: { value: Infinity }, symbol: 'Li', status: true },\n     { position: 4, name: 'Beryllium', date: { value: 0 }, symbol: '    ', status: false }\n    ];\n  }\n\n"),o.lc(),o.jc(),o.jc(),o.Vc(83,"\n\n        "),o.kc(84,"p"),o.Vc(85,"\n            "),o.kc(86,"strong"),o.Vc(87,"Note"),o.jc(),o.Vc(88,": If you want to override the template body of the table, you just use only ng-template\n            with ngx-td. If you use templating, then you need to specify the keys (example with toppings) in the\n            template in the order in which you want to display your columns.\n        "),o.jc(),o.Vc(89,"\n\n        "),o.kc(90,"p"),o.Vc(91,"\n            "),o.kc(92,"strong"),o.Vc(93,"Note"),o.jc(),o.Vc(94,": By default, if the cell value is invalid, then the default separator is used. You can\n            override or disable it in the module settings.\n        "),o.jc(),o.Vc(95,"\n    "),o.jc(),o.Vc(96,"\n"),o.jc(),o.Vc(97,"\n\n"),o.fc(98,"br"),o.fc(99,"br"),o.Vc(100,"\n")),2&n&&(o.Rb(21),o.Dc("source",e.data),o.Rb(34),o.Dc("source",e.elements),o.Rb(2),o.Dc("stub",null))},directives:[m.a,i.m,i.a,i.q,i.p],pipes:[c.c,c.e],encapsulation:2,changeDetection:0}),n})(),b=(()=>{class n{}return n.\u0275mod=o.bc({type:n}),n.\u0275inj=o.ac({factory:function(e){return new(e||n)},imports:[[c.b,a.a,l.b.forChild([{path:"",component:h}])]]}),n})()}}]);